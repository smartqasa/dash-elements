import { css, CSSResult, html, LitElement, TemplateResult } from "lit-element";
import { customElement, property, state } from "lit/decorators.js";
import { HomeAssistant, applyThemesOnElement, hasAction, handleClick } from "custom-card-helpers";

import { RokuCardConfig } from "./types";
import { actionHandler } from "./action-handler-directive";

const defaultRemoteAction = {
    action: "call-service",
    service: "remote.send_command",
};

@customElement("roku-card")
export class RokuCard extends LitElement {
    public getCardSize(): number {
        return 7;
    }

    @property({ attribute: false }) public hass?: HomeAssistant;
    @state() private config?: RokuCardConfig;

    public setConfig(config: RokuCardConfig): void {
        if (!config.entity && !config.remote) {
            console.log("Invalid configuration. If no entity provided, you'll need to provide a remote entity");
            return;
        }

        this.config = {
            theme: "default",
            haptic: "success",
            ...config,
        };
    }

    protected render(): TemplateResult | void {
        if (!this.config || !this.hass) {
            return html``;
        }

        const stateObj = this.hass.states[this.config.entity];

        if (this.config.entity && !stateObj) {
            return html`
                <ha-card>
                    <div class="warning">Entity Unavailable</div>
                </ha-card>
            `;
        }

        return html`
            <ha-card .header="${this.config.name}">
                <div class="remote">
                    <div class="row">
                        <div class="app">${stateObj ? stateObj.attributes.app_name : ""}</div>
                        ${this.config.tv || (this.config.power && this.config.power.show)
                            ? this._renderButton("power", "mdi:power", "Power")
                            : ""}
                    </div>
                    <div class="row">
                        ${this._renderButton("back", "mdi:arrow-left", "Back")}
                        ${this._renderButton("info", "mdi:asterisk", "Info")}
                        ${this._renderButton("home", "mdi:home", "Home")}
                    </div>

                    <div class="row">
                        ${this._renderImage(0)} ${this._renderButton("up", "mdi:chevron-up", "Up")}
                        ${this._renderImage(1)}
                    </div>

                    <div class="row">
                        ${this._renderButton("left", "mdi:chevron-left", "Left")}
                        ${this._renderButton("select", "mdi:checkbox-blank-circle", "Select")}
                        ${this._renderButton("right", "mdi:chevron-right", "Right")}
                    </div>

                    <div class="row">
                        ${this._renderImage(2)} ${this._renderButton("down", "mdi:chevron-down", "Down")}
                        ${this._renderImage(3)}
                    </div>

                    <div class="row">
                        ${this._renderButton("reverse", "mdi:rewind", "Rewind")}
                        ${this._renderButton("play", "mdi:play-pause", "Play/Pause")}
                        ${this._renderButton("forward", "mdi:fast-forward", "Fast-Forward")}
                    </div>

                    ${this.config.tv ||
                    (this.config.volume_mute && this.config.volume_mute.show) ||
                    (this.config.volume_down && this.config.volume_down.show) ||
                    (this.config.volume_up && this.config.volume_up.show)
                        ? html`
                              <div class="row">
                                  ${this._renderButton("volume_mute", "mdi:volume-mute", "Volume Mute")}
                                  ${this._renderButton("volume_down", "mdi:volume-minus", "Volume Down")}
                                  ${this._renderButton("volume_up", "mdi:volume-plus", "Volume Up")}
                              </div>
                          `
                        : ""}
                </div>
            </ha-card>
        `;
    }

    protected updated(changedProps: any): void {
        if (!this.config) return;

        if (this.hass) {
            const oldHass = changedProps.get("hass");
            if (!oldHass || oldHass.themes !== this.hass.themes) {
                applyThemesOnElement(this, this.hass.themes, this.config.theme);
            }
        }
    }

    static get styles(): CSSResult {
        return css`
            .remote {
                padding: 16px 0px 16px 0px;
            }
            img,
            ha-icon {
                cursor: pointer;
            }
            ha-icon-button {
                --mdc-icon-size: 48px;
            }
            ha-icon-button ha-icon {
                display: flex;
            }
            img {
                width: 64px;
                height: 64px;
                border-radius: 25px;
            }
            .row {
                display: flex;
                padding: 8px 36px 8px 36px;
                justify-content: space-evenly;
                align-items: center;
            }
            .warning {
                display: block;
                color: black;
                background-color: #fce588;
                padding: 8px;
            }
            .app {
                flex-grow: 3;
                font-size: 20px;
            }
        `;
    }

    private _renderImage(index: number): TemplateResult {
        return this.config && this.config.apps && this.config.apps.length > index
            ? this.config.apps[index].icon
                ? html`
                      <ha-icon-button
                          .app=${this.config.apps[index].app}
                          .title=${this.config.apps[index].app}
                          .config=${this.config.apps[index]}
                          @action=${this._handleAction}
                          .actionHandler=${actionHandler({
                              hasHold: hasAction(this.config.apps[index].hold_action),
                              hasDoubleClick: hasAction(this.config.apps[index].double_tap_action),
                          })}
                      >
                          <ha-icon .icon=${this.config.apps[index].icon}></ha-icon>
                      </ha-icon-button>
                  `
                : html`
                      <img
                          src=${this.config.apps[index].image || ""}
                          .app=${this.config.apps[index].app}
                          .config=${this.config.apps[index]}
                          @action=${this._handleAction}
                          .actionHandler=${actionHandler({
                              hasHold: hasAction(this.config.apps[index].hold_action),
                              hasDoubleClick: hasAction(this.config.apps[index].double_tap_action),
                          })}
                      />
                  `
            : html` <ha-icon icon="mdi:none"></ha-icon> `;
    }

    private _renderButton(button: string, icon: string, title: string): TemplateResult {
        if (this.config) {
            const config = this.config[button];
            return config && config.show === false
                ? html` <ha-icon icon="mdi:none"></ha-icon> `
                : html`
                      <ha-icon-button
                          .button=${button}
                          title=${title}
                          @action=${this._handleAction}
                          .actionHandler=${actionHandler({
                              hasHold: config && hasAction(config.hold_action),
                              hasDoubleClick: config && hasAction(config.double_tap_action),
                          })}
                      >
                          <ha-icon .icon=${icon}></ha-icon>
                      </ha-icon-button>
                  `;
        } else {
            return html``;
        }
    }

    private _handleAction(e: any): void {
        console.log("click");
        if (this.hass && this.config && e.detail.action) {
            const button = e.currentTarget.button;
            const config = this.config[button] || e.currentTarget.config;
            const app = e.currentTarget.app;
            const remote = this.config.remote ? this.config.remote : "remote." + this.config.entity.split(".")[1];

            handleClick(
                this,
                this.hass,
                app
                    ? {
                          tap_action: {
                              haptic: this.config.haptic,
                              action: "call-service",
                              service: "media_player.select_source",
                              service_data: {
                                  entity_id: this.config.entity,
                                  source: app,
                              },
                          },
                          ...config,
                      }
                    : {
                          tap_action: {
                              haptic: this.config.haptic,
                              service_data: {
                                  command: button,
                                  entity_id: remote,
                              },
                              ...defaultRemoteAction,
                          },
                          ...config,
                      },
                e.detail.action === "hold" ? true : false,
                e.detail.action === "double_tap" ? true : false
            );
        }
    }
}
